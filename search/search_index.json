{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"High-level overview \u00b6 Homer is web-based dashboard that simplifies your home page management. Designed for home labs, corporate internal networks, and anyone looking to organize their web-based work. It is built with Vue and uses yaml configuration files to provide you with a home page that is dead simple to build and serve! Ease of use & customizability \u00b6 Get up and running in seconds using Docker and customize to your hearts content using the long list of configuration options available! Add links to all your relevant services and web apps, categorize them in groups, and in some cases, get live status data right there on your home page. Customize your home page with your own images and CSS to make it fit your style!","title":"What is Homer"},{"location":"#high-level-overview","text":"Homer is web-based dashboard that simplifies your home page management. Designed for home labs, corporate internal networks, and anyone looking to organize their web-based work. It is built with Vue and uses yaml configuration files to provide you with a home page that is dead simple to build and serve!","title":"High-level overview"},{"location":"#ease-of-use-customizability","text":"Get up and running in seconds using Docker and customize to your hearts content using the long list of configuration options available! Add links to all your relevant services and web apps, categorize them in groups, and in some cases, get live status data right there on your home page. Customize your home page with your own images and CSS to make it fit your style!","title":"Ease of use &amp; customizability"},{"location":"configuration/","text":"Configuration \u00b6 Title, icons, links, colors, and services can be configured in the config.yml file (located in /assets directory once built, or in the public/assets directory in development mode), using yaml format. --- # Homepage configuration # See https://fontawesome.com/v5/search for icons options # Optional: Use external configuration file. # Using this will ignore remaining config in this file # externalConfig: https://example.com/server-luci/config.yaml title : \"App dashboard\" subtitle : \"Homer\" # Customize the browser tab text # documentTitle: \"Welcome\" logo : \"assets/logo.png\" # Alternatively a Font Awesome icon can be provided # icon: \"fas fa-skull-crossbones\" # Set to false to hide the header header : true # Set to false to hide the footer footer : > <p>Created with <span class=\"has-text-danger\">\u2764\ufe0f</span> with <a href=\"https://bulma.io/\">bulma</a>, <a href=\"https://vuejs.org/\">vuejs</a>, & <a href=\"https://fontawesome.com/\">font awesome</a> // Fork me on <a href=\"https://github.com/bastienwirtz/homer\"> <i class=\"fab fa-github-alt\"></i></a></p> # Use \"auto\" or number (must be a factor of 12: 1, 2, 3, 4, 6, 12) columns : \"3\" # Whether you want to display a message when the apps are not accessible # anymore (VPN disconnected for example) connectivityCheck : true # Optional: Set a different hotkey for search, defaults to \"/\" # hotkey: # search: \"Shift\" # Optional: Proxy / hosting option proxy : # Send cookies & authorization headers when fetching service specific data. # Set to `true` if you use an authentication proxy. Can be overrided on # service level. useCredentials : false # Set the default layout and color scheme defaults : layout : columns # Either 'columns', or 'list' colorTheme : auto # One of 'auto', 'light', or 'dark' # Optional theming: 'default' or one of the themes available in # 'src/assets/themes'. theme : default # Optional custom stylesheet # Will load custom CSS files. Especially useful for custom icon sets. # stylesheet: # - \"assets/custom.css\" # Here is the exhaustive list of customization parameters, however all values # are optional and will fallback to default if not set. If you want to change # only some of the colors, feel free to remove all unused keys. colors : light : highlight-primary : \"#3367d6\" highlight-secondary : \"#4285f4\" highlight-hover : \"#5a95f5\" background : \"#f5f5f5\" card-background : \"#ffffff\" text : \"#363636\" text-header : \"#424242\" text-title : \"#303030\" text-subtitle : \"#424242\" card-shadow : rgba(0, 0, 0, 0.1) link : \"#3273dc\" link-hover : \"#363636\" background-image : \"assets/your/light/bg.png\" dark : highlight-primary : \"#3367d6\" highlight-secondary : \"#4285f4\" highlight-hover : \"#5a95f5\" background : \"#131313\" card-background : \"#2b2b2b\" text : \"#eaeaea\" text-header : \"#ffffff\" text-title : \"#fafafa\" text-subtitle : \"#f5f5f5\" card-shadow : rgba(0, 0, 0, 0.4) link : \"#3273dc\" link-hover : \"#ffdd57\" background-image : \"assets/your/dark/bg.png\" # Optional message message : # Uses Bulma. See https://bulma.io/documentation/components/message/#colors # for styling options. style : \"is-warning\" title : \"Optional message!\" icon : \"fa fa-exclamation-triangle\" content : \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\" # Can optionally fetch information from an endpoint to override value below. # url: \"https://<my-api-endpoint>\" # mapping: # Select the appropriate fields from the response object. # title: 'id' # Use value from field 'id' as title # content: 'value' # Use value from field 'value' as content # refreshInterval: 10000 # Optional: time interval to refresh message # # Real example using chucknorris.io for showing Chuck Norris facts: # url: https://api.chucknorris.io/jokes/random # mapping: # title: 'id' # content: 'value' # refreshInterval: 10000 # Optional navbar # Specify [] for navbar (dark mode, layout, and search) without any links # links: [] links : - name : \"Link 1\" icon : \"fab fa-github\" url : \"https://github.com/bastienwirtz/homer\" target : \"_blank\" # optional html tag target attribute - name : \"link 2\" icon : \"fas fa-book\" url : \"https://github.com/bastienwirtz/homer\" # Urls starting with # will link to additional Homer pages. Passing \"#page2\" # will load config from page2.yml as overrides on top of the default values # set in this config.yml. - name : \"Second Page\" icon : \"fas fa-file-alt\" url : \"#page2\" # Services # First level array represents a group. Use only an \"items\" key if not using # groups (name, icon, & tagstyle are optional; section separation will not be # displayed). services : - name : \"Application\" icon : \"fas fa-code-branch\" # A path to an image can also be provided. Note that icon will take # precedence if both icon and logo are set. # logo: \"path/to/logo\" items : - name : \"Awesome app\" logo : \"assets/tools/sample.png\" # Alternatively a fa icon can be provided: # icon: \"fab fa-jenkins\" subtitle : \"Bookmark example\" tag : \"app\" url : \"https://www.reddit.com/r/selfhosted/\" # Optional: HTML <a> tag target attribute target : \"_blank\" - name : \"Another one\" logo : \"assets/tools/sample2.png\" subtitle : \"Another application\" tag : \"app\" # Optional tagstyle tagstyle : \"is-success\" url : \"#\" - name : \"Other group\" icon : \"fas fa-heartbeat\" items : - name : \"Pi-hole\" logo : \"assets/tools/sample.png\" # Optional: If no subtitle is defined, PiHole statistics will be shown. # subtitle: \"Network-wide Ad Blocking\" tag : \"other\" url : \"http://192.168.0.151/admin\" # Optional: Loads a specific component that provides extra features. # MUST MATCH a file name (without file extension) available in # `src/components/services` type : \"PiHole\" # Optional: HTML <a> tag target attribute target : \"_blank\" # Optional: Custom CSS class for card, useful with custom stylesheet # class: \"green\" # Optional: Set background color directly without custom stylesheet # background: red View Custom Services for details about all available custom services (like PiHole) and how to configure them. If you choose to fetch message information from an endpoint, the output format should be as follows (or you can custom map fields as shown in tips and tricks ): { \"style\" : null , \"title\" : \"Lorem ipsum 42\" , \"content\" : \"LA LA LA Lorem ipsum dolor sit amet, .....\" } null value or missing keys will be ignored and value from the config.yml will be used if available. Empty values (either in config.yml or the endpoint data) will hide the element (ex: set \"title\": \"\" to hide the title bar). Style Options \u00b6 Homer uses Bulma CSS , which provides a modifiers syntax . You'll notice in the config there is a tagstyle option. It can be set to any of the bulma modifiers. You'll probably want to use one of these 4 main colors: is-info (blue) is-success (green) is-warning (yellow) is-danger (red) You can read the bulma modifiers page for other options regarding size, style, or state. PWA Icons \u00b6 In order to easily generate all required icon preset for the PWA to work, a tool like vue-pwa-asset-generator can be used: npx vue-pwa-asset-generator -a { your_512x512_source_png } -o { your_output_folder }","title":"Configuration"},{"location":"configuration/#configuration","text":"Title, icons, links, colors, and services can be configured in the config.yml file (located in /assets directory once built, or in the public/assets directory in development mode), using yaml format. --- # Homepage configuration # See https://fontawesome.com/v5/search for icons options # Optional: Use external configuration file. # Using this will ignore remaining config in this file # externalConfig: https://example.com/server-luci/config.yaml title : \"App dashboard\" subtitle : \"Homer\" # Customize the browser tab text # documentTitle: \"Welcome\" logo : \"assets/logo.png\" # Alternatively a Font Awesome icon can be provided # icon: \"fas fa-skull-crossbones\" # Set to false to hide the header header : true # Set to false to hide the footer footer : > <p>Created with <span class=\"has-text-danger\">\u2764\ufe0f</span> with <a href=\"https://bulma.io/\">bulma</a>, <a href=\"https://vuejs.org/\">vuejs</a>, & <a href=\"https://fontawesome.com/\">font awesome</a> // Fork me on <a href=\"https://github.com/bastienwirtz/homer\"> <i class=\"fab fa-github-alt\"></i></a></p> # Use \"auto\" or number (must be a factor of 12: 1, 2, 3, 4, 6, 12) columns : \"3\" # Whether you want to display a message when the apps are not accessible # anymore (VPN disconnected for example) connectivityCheck : true # Optional: Set a different hotkey for search, defaults to \"/\" # hotkey: # search: \"Shift\" # Optional: Proxy / hosting option proxy : # Send cookies & authorization headers when fetching service specific data. # Set to `true` if you use an authentication proxy. Can be overrided on # service level. useCredentials : false # Set the default layout and color scheme defaults : layout : columns # Either 'columns', or 'list' colorTheme : auto # One of 'auto', 'light', or 'dark' # Optional theming: 'default' or one of the themes available in # 'src/assets/themes'. theme : default # Optional custom stylesheet # Will load custom CSS files. Especially useful for custom icon sets. # stylesheet: # - \"assets/custom.css\" # Here is the exhaustive list of customization parameters, however all values # are optional and will fallback to default if not set. If you want to change # only some of the colors, feel free to remove all unused keys. colors : light : highlight-primary : \"#3367d6\" highlight-secondary : \"#4285f4\" highlight-hover : \"#5a95f5\" background : \"#f5f5f5\" card-background : \"#ffffff\" text : \"#363636\" text-header : \"#424242\" text-title : \"#303030\" text-subtitle : \"#424242\" card-shadow : rgba(0, 0, 0, 0.1) link : \"#3273dc\" link-hover : \"#363636\" background-image : \"assets/your/light/bg.png\" dark : highlight-primary : \"#3367d6\" highlight-secondary : \"#4285f4\" highlight-hover : \"#5a95f5\" background : \"#131313\" card-background : \"#2b2b2b\" text : \"#eaeaea\" text-header : \"#ffffff\" text-title : \"#fafafa\" text-subtitle : \"#f5f5f5\" card-shadow : rgba(0, 0, 0, 0.4) link : \"#3273dc\" link-hover : \"#ffdd57\" background-image : \"assets/your/dark/bg.png\" # Optional message message : # Uses Bulma. See https://bulma.io/documentation/components/message/#colors # for styling options. style : \"is-warning\" title : \"Optional message!\" icon : \"fa fa-exclamation-triangle\" content : \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\" # Can optionally fetch information from an endpoint to override value below. # url: \"https://<my-api-endpoint>\" # mapping: # Select the appropriate fields from the response object. # title: 'id' # Use value from field 'id' as title # content: 'value' # Use value from field 'value' as content # refreshInterval: 10000 # Optional: time interval to refresh message # # Real example using chucknorris.io for showing Chuck Norris facts: # url: https://api.chucknorris.io/jokes/random # mapping: # title: 'id' # content: 'value' # refreshInterval: 10000 # Optional navbar # Specify [] for navbar (dark mode, layout, and search) without any links # links: [] links : - name : \"Link 1\" icon : \"fab fa-github\" url : \"https://github.com/bastienwirtz/homer\" target : \"_blank\" # optional html tag target attribute - name : \"link 2\" icon : \"fas fa-book\" url : \"https://github.com/bastienwirtz/homer\" # Urls starting with # will link to additional Homer pages. Passing \"#page2\" # will load config from page2.yml as overrides on top of the default values # set in this config.yml. - name : \"Second Page\" icon : \"fas fa-file-alt\" url : \"#page2\" # Services # First level array represents a group. Use only an \"items\" key if not using # groups (name, icon, & tagstyle are optional; section separation will not be # displayed). services : - name : \"Application\" icon : \"fas fa-code-branch\" # A path to an image can also be provided. Note that icon will take # precedence if both icon and logo are set. # logo: \"path/to/logo\" items : - name : \"Awesome app\" logo : \"assets/tools/sample.png\" # Alternatively a fa icon can be provided: # icon: \"fab fa-jenkins\" subtitle : \"Bookmark example\" tag : \"app\" url : \"https://www.reddit.com/r/selfhosted/\" # Optional: HTML <a> tag target attribute target : \"_blank\" - name : \"Another one\" logo : \"assets/tools/sample2.png\" subtitle : \"Another application\" tag : \"app\" # Optional tagstyle tagstyle : \"is-success\" url : \"#\" - name : \"Other group\" icon : \"fas fa-heartbeat\" items : - name : \"Pi-hole\" logo : \"assets/tools/sample.png\" # Optional: If no subtitle is defined, PiHole statistics will be shown. # subtitle: \"Network-wide Ad Blocking\" tag : \"other\" url : \"http://192.168.0.151/admin\" # Optional: Loads a specific component that provides extra features. # MUST MATCH a file name (without file extension) available in # `src/components/services` type : \"PiHole\" # Optional: HTML <a> tag target attribute target : \"_blank\" # Optional: Custom CSS class for card, useful with custom stylesheet # class: \"green\" # Optional: Set background color directly without custom stylesheet # background: red View Custom Services for details about all available custom services (like PiHole) and how to configure them. If you choose to fetch message information from an endpoint, the output format should be as follows (or you can custom map fields as shown in tips and tricks ): { \"style\" : null , \"title\" : \"Lorem ipsum 42\" , \"content\" : \"LA LA LA Lorem ipsum dolor sit amet, .....\" } null value or missing keys will be ignored and value from the config.yml will be used if available. Empty values (either in config.yml or the endpoint data) will hide the element (ex: set \"title\": \"\" to hide the title bar).","title":"Configuration"},{"location":"configuration/#style-options","text":"Homer uses Bulma CSS , which provides a modifiers syntax . You'll notice in the config there is a tagstyle option. It can be set to any of the bulma modifiers. You'll probably want to use one of these 4 main colors: is-info (blue) is-success (green) is-warning (yellow) is-danger (red) You can read the bulma modifiers page for other options regarding size, style, or state.","title":"Style Options"},{"location":"configuration/#pwa-icons","text":"In order to easily generate all required icon preset for the PWA to work, a tool like vue-pwa-asset-generator can be used: npx vue-pwa-asset-generator -a { your_512x512_source_png } -o { your_output_folder }","title":"PWA Icons"},{"location":"custom_services/","text":"Custom Services \u00b6 Some service can use a specific a component that provides some extra features by adding a type key to the service yaml configuration and, where applicable, an apikey. Note that config.yml is exposed at /assets/config.yml via HTTP and any apikey included in the configuration file is exposed to anyone who can access the homer instance. Only include an apikey if your homer instance is secured behind some form of authentication or access restriction. Available services are in src/components/ . Here is an overview of all custom services that are available within Homer: + PiHole + OpenWeatherMap + Medusa + Lidarr, Prowlarr, Sonarr and Radarr + PaperlessNG + Ping + Prometheus + AdGuard Home + Portainer + Emby + Uptime Kuma If you experiencing any issue, please have a look to the troubleshooting page. Common options \u00b6 - name : \"My Service\" logo : \"assets/tools/sample.png\" url : \"http://my-service-link\" endpoint : \"http://my-service-endpoint\" # Optional: alternative base URL used to fetch service data is necessary. useCredentials : false # Optional: Override global proxy.useCredentials configuration. type : \"<type>\" PiHole \u00b6 Using the PiHole service you can display info about your local PiHole instance right on your Homer dashboard. The following configuration is available for the PiHole service. - name : \"Pi-hole\" logo : \"assets/tools/sample.png\" # subtitle: \"Network-wide Ad Blocking\" # optional, if no subtitle is defined, PiHole statistics will be shown url : \"http://192.168.0.151/admin\" type : \"PiHole\" OpenWeatherMap \u00b6 Using the OpenWeatherMap service you can display weather information about a given location. The following configuration is available for the OpenWeatherMap service: - name : \"Weather\" location : \"Amsterdam\" # your location. locationId : \"2759794\" # Optional: Specify OpenWeatherMap city ID for better accuracy apikey : \"<---insert-api-key-here--->\" # insert your own API key here. Request one from https://openweathermap.org/api. units : \"metric\" # units to display temperature. Can be one of: metric, imperial, kelvin. Defaults to kelvin. background : \"square\" # choose which type of background you want behind the image. Can be one of: square, cicle, none. Defaults to none. type : \"OpenWeather\" Remarks: If for some reason your city can't be found by entering the name in the location property, you could also try to configure the OWM city ID in the locationId property. To retrieve your specific City ID, go to the OWM website , search for your city and retrieve the ID from the URL (for example, the City ID of Amsterdam is 2759794). Medusa \u00b6 This service displays News (grey), Warning (orange) or Error (red) notifications bubbles from the Medusa application. Two lines are needed in the config.yml : type : \"Medusa\" apikey : \"01234deb70424befb1f4ef6a23456789\" The url must be the root url of Medusa application. The Medusa API key can be found in General configuration > Interface. It is needed to access Medusa API. Lidarr, Prowlarr, Sonarr and Radarr \u00b6 This service displays Activity (blue), Warning (orange) or Error (red) notifications bubbles from the Lidarr, Radarr or Sonarr application. Two lines are needed in the config.yml : type : \"Lidarr\" , \"Prowlarr\" , \"Radarr\" or \"Sonarr\" apikey : \"01234deb70424befb1f4ef6a23456789\" The url must be the root url of Lidarr, Prowlarr, Radarr or Sonarr application. The Lidarr, Prowlarr, Radarr or Sonarr API key can be found in Settings > General. It is needed to access the API. If you are using an older version of Radarr or Sonarr which don't support the new V3 api endpoints, add the following line to your service config \"legacyApi: true\", example: - name : \"Radarr\" type : \"Radarr\" url : \"http://localhost:7878/\" apikey : \"MY-SUPER-SECRET-API-KEY\" target : \"_blank\" legacyApi : true PaperlessNG \u00b6 This service displays total number of documents stored. Two lines are required: type : \"PaperlessNG\" apikey : \"0123456789abcdef123456789abcdef\" API key can be generated in Settings > Administration > Auth Tokens Ping \u00b6 For Ping you need to set the type to Ping and provide a url. - name : \"Awesome app\" type : Ping logo : \"assets/tools/sample.png\" subtitle : \"Bookmark example\" tag : \"app\" url : \"https://www.reddit.com/r/selfhosted/\" Prometheus \u00b6 For Prometheus you need to set the type to Prometheus and provide a url. - name : \"Prometheus\" type : Prometheus logo : \"assets/tools/sample.png\" url : \"http://192.168.0.151/\" # subtitle: \"Monitor data server\" AdGuard Home \u00b6 For AdGuard Home you need to set the type to AdGuard, if you have somes issues as 403 responses on requests you need to provide authentification in headers for locations needed as below. - name : \"Adguard\" logo : \"assets/tools/adguardhome.png\" url : \"https://adguard.exemple.com\" target : \"_blank\" type : \"AdGuardHome\" Portainer \u00b6 This service displays info about the total number of containers managed by your Portainer instance. In order to use it, you must be using Portainer version 1.11 or later. Generate an access token from the UI and pass it to the apikey field. By default, every connected environments will be checked. To select specific ones,add an \"environments\" entry which can be a simple string or an array containing all the selected environments name. See https://docs.portainer.io/v/ce-2.11/user/account-settings#access-tokens - name : \"Portainer\" logo : \"assets/tools/sample.png\" url : \"http://192.168.0.151/\" type : \"Portainer\" apikey : \"MY-SUPER-SECRET-API-KEY\" # environments: # - \"raspberry\" # - \"local\" Emby \u00b6 You need to set the type to Emby, provide an api key and choose which stats to show if the subtitle is disabled. - name : \"Emby\" logo : \"assets/tools/sample.png\" url : \"http://192.168.0.151/\" type : \"Emby\" apikey : \"MY-SUPER-SECRET-API-KEY\" libraryType : \"music\" #Choose which stats to show. Can be one of: music, series or movies. Uptime Kuma \u00b6 Using the Uptime Kuma service you can display info about your instance uptime right on your Homer dashboard. The following configuration is available for the UptimeKuma service. Needs v1.13.1 or later because of the change in APIs due to multiple status pages support . - name : \"Uptime Kuma\" logo : \"assets/tools/sample.png\" # subtitle: \"A fancy self-hosted monitoring tool\" # optional, if no subtitle is defined, Uptime Kuma incidents, if any, will be shown url : \"http://192.168.0.151:3001\" slug : \"myCustomDashboard\" # Defaults to \"default\" if not provided. type : \"UptimeKuma\"","title":"Custom services"},{"location":"custom_services/#custom-services","text":"Some service can use a specific a component that provides some extra features by adding a type key to the service yaml configuration and, where applicable, an apikey. Note that config.yml is exposed at /assets/config.yml via HTTP and any apikey included in the configuration file is exposed to anyone who can access the homer instance. Only include an apikey if your homer instance is secured behind some form of authentication or access restriction. Available services are in src/components/ . Here is an overview of all custom services that are available within Homer: + PiHole + OpenWeatherMap + Medusa + Lidarr, Prowlarr, Sonarr and Radarr + PaperlessNG + Ping + Prometheus + AdGuard Home + Portainer + Emby + Uptime Kuma If you experiencing any issue, please have a look to the troubleshooting page.","title":"Custom Services"},{"location":"custom_services/#common-options","text":"- name : \"My Service\" logo : \"assets/tools/sample.png\" url : \"http://my-service-link\" endpoint : \"http://my-service-endpoint\" # Optional: alternative base URL used to fetch service data is necessary. useCredentials : false # Optional: Override global proxy.useCredentials configuration. type : \"<type>\"","title":"Common options"},{"location":"custom_services/#pihole","text":"Using the PiHole service you can display info about your local PiHole instance right on your Homer dashboard. The following configuration is available for the PiHole service. - name : \"Pi-hole\" logo : \"assets/tools/sample.png\" # subtitle: \"Network-wide Ad Blocking\" # optional, if no subtitle is defined, PiHole statistics will be shown url : \"http://192.168.0.151/admin\" type : \"PiHole\"","title":"PiHole"},{"location":"custom_services/#openweathermap","text":"Using the OpenWeatherMap service you can display weather information about a given location. The following configuration is available for the OpenWeatherMap service: - name : \"Weather\" location : \"Amsterdam\" # your location. locationId : \"2759794\" # Optional: Specify OpenWeatherMap city ID for better accuracy apikey : \"<---insert-api-key-here--->\" # insert your own API key here. Request one from https://openweathermap.org/api. units : \"metric\" # units to display temperature. Can be one of: metric, imperial, kelvin. Defaults to kelvin. background : \"square\" # choose which type of background you want behind the image. Can be one of: square, cicle, none. Defaults to none. type : \"OpenWeather\" Remarks: If for some reason your city can't be found by entering the name in the location property, you could also try to configure the OWM city ID in the locationId property. To retrieve your specific City ID, go to the OWM website , search for your city and retrieve the ID from the URL (for example, the City ID of Amsterdam is 2759794).","title":"OpenWeatherMap"},{"location":"custom_services/#medusa","text":"This service displays News (grey), Warning (orange) or Error (red) notifications bubbles from the Medusa application. Two lines are needed in the config.yml : type : \"Medusa\" apikey : \"01234deb70424befb1f4ef6a23456789\" The url must be the root url of Medusa application. The Medusa API key can be found in General configuration > Interface. It is needed to access Medusa API.","title":"Medusa"},{"location":"custom_services/#lidarr-prowlarr-sonarr-and-radarr","text":"This service displays Activity (blue), Warning (orange) or Error (red) notifications bubbles from the Lidarr, Radarr or Sonarr application. Two lines are needed in the config.yml : type : \"Lidarr\" , \"Prowlarr\" , \"Radarr\" or \"Sonarr\" apikey : \"01234deb70424befb1f4ef6a23456789\" The url must be the root url of Lidarr, Prowlarr, Radarr or Sonarr application. The Lidarr, Prowlarr, Radarr or Sonarr API key can be found in Settings > General. It is needed to access the API. If you are using an older version of Radarr or Sonarr which don't support the new V3 api endpoints, add the following line to your service config \"legacyApi: true\", example: - name : \"Radarr\" type : \"Radarr\" url : \"http://localhost:7878/\" apikey : \"MY-SUPER-SECRET-API-KEY\" target : \"_blank\" legacyApi : true","title":"Lidarr, Prowlarr, Sonarr and Radarr"},{"location":"custom_services/#paperlessng","text":"This service displays total number of documents stored. Two lines are required: type : \"PaperlessNG\" apikey : \"0123456789abcdef123456789abcdef\" API key can be generated in Settings > Administration > Auth Tokens","title":"PaperlessNG"},{"location":"custom_services/#ping","text":"For Ping you need to set the type to Ping and provide a url. - name : \"Awesome app\" type : Ping logo : \"assets/tools/sample.png\" subtitle : \"Bookmark example\" tag : \"app\" url : \"https://www.reddit.com/r/selfhosted/\"","title":"Ping"},{"location":"custom_services/#prometheus","text":"For Prometheus you need to set the type to Prometheus and provide a url. - name : \"Prometheus\" type : Prometheus logo : \"assets/tools/sample.png\" url : \"http://192.168.0.151/\" # subtitle: \"Monitor data server\"","title":"Prometheus"},{"location":"custom_services/#adguard-home","text":"For AdGuard Home you need to set the type to AdGuard, if you have somes issues as 403 responses on requests you need to provide authentification in headers for locations needed as below. - name : \"Adguard\" logo : \"assets/tools/adguardhome.png\" url : \"https://adguard.exemple.com\" target : \"_blank\" type : \"AdGuardHome\"","title":"AdGuard Home"},{"location":"custom_services/#portainer","text":"This service displays info about the total number of containers managed by your Portainer instance. In order to use it, you must be using Portainer version 1.11 or later. Generate an access token from the UI and pass it to the apikey field. By default, every connected environments will be checked. To select specific ones,add an \"environments\" entry which can be a simple string or an array containing all the selected environments name. See https://docs.portainer.io/v/ce-2.11/user/account-settings#access-tokens - name : \"Portainer\" logo : \"assets/tools/sample.png\" url : \"http://192.168.0.151/\" type : \"Portainer\" apikey : \"MY-SUPER-SECRET-API-KEY\" # environments: # - \"raspberry\" # - \"local\"","title":"Portainer"},{"location":"custom_services/#emby","text":"You need to set the type to Emby, provide an api key and choose which stats to show if the subtitle is disabled. - name : \"Emby\" logo : \"assets/tools/sample.png\" url : \"http://192.168.0.151/\" type : \"Emby\" apikey : \"MY-SUPER-SECRET-API-KEY\" libraryType : \"music\" #Choose which stats to show. Can be one of: music, series or movies.","title":"Emby"},{"location":"custom_services/#uptime-kuma","text":"Using the Uptime Kuma service you can display info about your instance uptime right on your Homer dashboard. The following configuration is available for the UptimeKuma service. Needs v1.13.1 or later because of the change in APIs due to multiple status pages support . - name : \"Uptime Kuma\" logo : \"assets/tools/sample.png\" # subtitle: \"A fancy self-hosted monitoring tool\" # optional, if no subtitle is defined, Uptime Kuma incidents, if any, will be shown url : \"http://192.168.0.151:3001\" slug : \"myCustomDashboard\" # Defaults to \"default\" if not provided. type : \"UptimeKuma\"","title":"Uptime Kuma"},{"location":"development/","text":"Development \u00b6 If you want to contribute to Homer, please read the contributing guidelines first. # Using yarn (recommended) yarn install yarn serve # **OR** Using npm npm install npm run serve Custom services \u00b6 Custom services are small VueJs component (see src/components/services/ ) that add little features to a classic, \"static\", dashboard item. It should be very simple. A dashboard can contain a lot of items, so performance is very important. The Generic service provides a typical card layout which you can extend to add specific features. Unless you want a completely different design, extended the generic service is the recommended way. It gives you 3 slots to extend: icon , content and indicator . Each one is optional , and will display the usual information if omitted. Each service must implement the item property and bind it the Generic component if used. Skeleton \u00b6 <template> <Generic :item=\"item\"> <template #icon> <!-- left area containing the icon --> </template> <template #content> <!-- main area containing the title, subtitle, ... --> </template> <template #indicator> <!-- top right area, empty by default --> </template> </Generic> </template> <script> import Generic from \"./Generic.vue\"; export default { name: \"MyNewService\", props: { item: Object, }, components: { Generic, } }; </script> Themes \u00b6 Themes are meant to be simple customization (written in scss ). To add a new theme, just add a file in the theme directory, and put all style in the body #app.theme-<name> scope. Then import it in the main style file. // `src/assets/themes/my-awesome-theme.scss` body #app .theme-my-awesome-theme. { ... } // `src/assets/app.scss` // Themes import @import \"./themes/sui.scss\" ; ... @ import \"./themes/my-awesome-theme.scss\" ; Documentation \u00b6 Install Python dependencies \u00b6 Homer's documentation is built using Material for MkDocs . To get started, you'll need Python 3 installed on your machine and set up your local environment. python -m venv venv source venv/bin/activate pip install -r requirements.txt Preview local copy \u00b6 MkDocs comes with a command-line utility for building and serving the static documentation site every time you save a file. To launch it, run the serve command. mkdocs serve Your local version of the docs site will now be available at http://localhost:8000/.","title":"Development"},{"location":"development/#development","text":"If you want to contribute to Homer, please read the contributing guidelines first. # Using yarn (recommended) yarn install yarn serve # **OR** Using npm npm install npm run serve","title":"Development"},{"location":"development/#custom-services","text":"Custom services are small VueJs component (see src/components/services/ ) that add little features to a classic, \"static\", dashboard item. It should be very simple. A dashboard can contain a lot of items, so performance is very important. The Generic service provides a typical card layout which you can extend to add specific features. Unless you want a completely different design, extended the generic service is the recommended way. It gives you 3 slots to extend: icon , content and indicator . Each one is optional , and will display the usual information if omitted. Each service must implement the item property and bind it the Generic component if used.","title":"Custom services"},{"location":"development/#skeleton","text":"<template> <Generic :item=\"item\"> <template #icon> <!-- left area containing the icon --> </template> <template #content> <!-- main area containing the title, subtitle, ... --> </template> <template #indicator> <!-- top right area, empty by default --> </template> </Generic> </template> <script> import Generic from \"./Generic.vue\"; export default { name: \"MyNewService\", props: { item: Object, }, components: { Generic, } }; </script>","title":"Skeleton"},{"location":"development/#themes","text":"Themes are meant to be simple customization (written in scss ). To add a new theme, just add a file in the theme directory, and put all style in the body #app.theme-<name> scope. Then import it in the main style file. // `src/assets/themes/my-awesome-theme.scss` body #app .theme-my-awesome-theme. { ... } // `src/assets/app.scss` // Themes import @import \"./themes/sui.scss\" ; ... @ import \"./themes/my-awesome-theme.scss\" ;","title":"Themes"},{"location":"development/#documentation","text":"","title":"Documentation"},{"location":"development/#install-python-dependencies","text":"Homer's documentation is built using Material for MkDocs . To get started, you'll need Python 3 installed on your machine and set up your local environment. python -m venv venv source venv/bin/activate pip install -r requirements.txt","title":"Install Python dependencies"},{"location":"development/#preview-local-copy","text":"MkDocs comes with a command-line utility for building and serving the static documentation site every time you save a file. To launch it, run the serve command. mkdocs serve Your local version of the docs site will now be available at http://localhost:8000/.","title":"Preview local copy"},{"location":"getting_started/","text":"Using Docker \u00b6 The fastest and recommended way to get your Homer instance up and running is with Docker. The Docker image comes with a web server built-in so that all you need to worry about is your config file. Internally, the Docker image looks for the assets in the /www/assets directory so you can bind a volume from your host machine to that directory in order to modify and persist the configuration files. The web server serves the dashboard on port 8080, but using a port binding will let you expose that to whatever external port you like. docker \u00b6 To launch container: docker run -d \\ -p 8080 :8080 \\ -v </your/local/assets>:/www/assets \\ --restart = always \\ b4bz/homer:latest Use UID and/or GID env var to change the assets owner: docker run -d \\ -p 8080 :8080 \\ -v </your/local/assets>:/www/assets \\ -e \"UID=1000\" -e \"GID=1000\" \\ --restart = always \\ b4bz/homer:latest docker-compose \u00b6 It is recommended to use docker-compose to manage your Docker containers, and below you can find a simple compose yaml file. Copy the contents into a docker-compose.yaml and modify the volume binding to your desired directory to get started: version : '3.3' services : homer : restart : always volumes : - /your/local/assets:/www/assets ports : - 8080:8080 image : b4bz/homer To launch container: cd /path/to/docker-compose.yml docker-compose up -d Use UID and/or GID env var to change the assets owner: version : '3.3' services : homer : restart : always volumes : - /your/local/assets:/www/assets ports : - 8080:8080 environment : - UID=1000 - GID=1000 image : b4bz/homer Shipping your own web server \u00b6 Prebuilt release tarball \u00b6 Download and extract the latest release ( homer.zip ) from the release page , rename the assets/config.yml.dist file to assets/config.yml , and put it behind a web server. wget https://github.com/bastienwirtz/homer/releases/latest/download/homer.zip unzip homer.zip cd homer cp assets/config.yml.dist assets/config.yml npx serve # or python -m http.server 8010 or apache, nginx ... Building from source \u00b6 # Using yarn (recommended) yarn install yarn build # **OR** Using npm npm install npm run build Then your dashboard is ready to use in the /dist directory.","title":"Getting started"},{"location":"getting_started/#using-docker","text":"The fastest and recommended way to get your Homer instance up and running is with Docker. The Docker image comes with a web server built-in so that all you need to worry about is your config file. Internally, the Docker image looks for the assets in the /www/assets directory so you can bind a volume from your host machine to that directory in order to modify and persist the configuration files. The web server serves the dashboard on port 8080, but using a port binding will let you expose that to whatever external port you like.","title":"Using Docker"},{"location":"getting_started/#docker","text":"To launch container: docker run -d \\ -p 8080 :8080 \\ -v </your/local/assets>:/www/assets \\ --restart = always \\ b4bz/homer:latest Use UID and/or GID env var to change the assets owner: docker run -d \\ -p 8080 :8080 \\ -v </your/local/assets>:/www/assets \\ -e \"UID=1000\" -e \"GID=1000\" \\ --restart = always \\ b4bz/homer:latest","title":"docker"},{"location":"getting_started/#docker-compose","text":"It is recommended to use docker-compose to manage your Docker containers, and below you can find a simple compose yaml file. Copy the contents into a docker-compose.yaml and modify the volume binding to your desired directory to get started: version : '3.3' services : homer : restart : always volumes : - /your/local/assets:/www/assets ports : - 8080:8080 image : b4bz/homer To launch container: cd /path/to/docker-compose.yml docker-compose up -d Use UID and/or GID env var to change the assets owner: version : '3.3' services : homer : restart : always volumes : - /your/local/assets:/www/assets ports : - 8080:8080 environment : - UID=1000 - GID=1000 image : b4bz/homer","title":"docker-compose"},{"location":"getting_started/#shipping-your-own-web-server","text":"","title":"Shipping your own web server"},{"location":"getting_started/#prebuilt-release-tarball","text":"Download and extract the latest release ( homer.zip ) from the release page , rename the assets/config.yml.dist file to assets/config.yml , and put it behind a web server. wget https://github.com/bastienwirtz/homer/releases/latest/download/homer.zip unzip homer.zip cd homer cp assets/config.yml.dist assets/config.yml npx serve # or python -m http.server 8010 or apache, nginx ...","title":"Prebuilt release tarball"},{"location":"getting_started/#building-from-source","text":"# Using yarn (recommended) yarn install yarn build # **OR** Using npm npm install npm run build Then your dashboard is ready to use in the /dist directory.","title":"Building from source"},{"location":"tips_and_tricks/","text":"Tips & Tricks \u00b6 Here is a collection of neat tips and tricks that Homer users have come up with! Use Homer as a custom \"new tab\" page \u00b6 by @vosdev \u00b6 These extensions for Firefox and Chrome & Friends allow you to have your homer dashboard in your new tab page, while leaving focus on the address bar meaning you can still type right away if you want to search or go to a page that is not on your homer dash. The Firefox extension loads Homer in an iframe on your new tab page, meaning you have to add target: '_top' to each of your items. - name : \"Reddit\" logo : \"assets/daily/reddit.png\" url : \"https://reddit.com\" target : '_top' - name : \"YouTube\" logo : \"assets/daily/youtube.png\" url : \"https://youtube.com\" target : '_top' YAML Anchors \u00b6 by @JamiePhonic \u00b6 Since Homer is configured using YAML, it supports all of YAML's helpful features, such as anchoring! For example, you can define tags and tag styles for each \"item\" in a service. Using Anchoring, you can define all your tags and their styles once like this: (for example) # Some pre-defined tag styles. reference these using <<: *{NAME} inside an item definition; For Example, <<: *Apps tags : Favourite : &Favourite - tag : \"Favourite\" tagstyle : \"is-medium is-primary\" CI : &CI - tag : \"CI\" tagstyle : \"is-medium is-success\" Apps : &Apps - tag : \"App\" tagstyle : \"is-medium is-info\" and then simply reference these pre-defined (anchored) tags in each item like so: - name : \"VS Code\" logo : \"/assets/vscode.png\" subtitle : \"Develop Code Anywhere, On Anything!\" << : *Apps # Reference to the predefined \"App\" Tag url : \"https://vscode.example.com/\" target : \"_blank\" # optional html tag target attribute ```` Then when Homer reads your config, it will substitute your anchors automatically, the above example is equal to : ``` yaml - name : \"VS Code\" logo : \"/assets/vscode.png\" subtitle : \"Develop Code Anywhere, On Anything!\" tag : \"App\" tagstyle : \"is-medium is-info\" url : \"https://vscode.example.com/\" target : \"_blank\" # optional html tag target attribute The end result is that if you want to update the name or style of any particular tag, just update it once, in the tags section! Great if you have a lot of services or a lot of tags! Remotely edit your config with Code Server \u00b6 by @JamiePhonic \u00b6 Homer doesn't yet provide a way to edit your configuration from inside Homer itself, but that doesn't mean it can't be done! You can setup and use Code-Server to edit your config.yml file from anywhere! If you're running Homer in docker, you can setup a Code-Server container and pass your homer config directory into it. Simply pass your homer config directory as an extra -v parameter to your code-server container: -v '/your/local/homer/config-dir/' : '/config/homer' : 'rw' This will map your homer config directory (For example, /docker/appdata/homer/) into code-server's /config/ directory, in a sub folder called homer As a bonus, Code-Server puts the \"current folder\" as a parameter in the URL bar, so you could add a links: entry in Homer that points to your code-server instance with the directory pre-filled for essentially 1 click editing! For example: links: - name: Edit config icon: fas fa-cog url: https://vscode.example.net/?folder=/config/homer target: \"_blank\" # optional html tag target attribute where the path after ?folder= is the path to the folder where you mounted your homer config INSIDE the Code-Server container. Example Code-Server docker create command \u00b6 docker create \\ --name = code-server \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e TZ = Europe/London \\ -e PASSWORD ={ YOUR_PASSWORD } ` #optional` \\ -e SUDO_PASSWORD ={ YOUR SUDO_PASSWORD } ` #optional` \\ -p 8443 :8443 \\ -v /path/to/appdata/config:/config \\ -v /your/local/homer/config-dir/:/config/homer \\ --restart unless-stopped \\ linuxserver/code-server Get the news headlines in Homer \u00b6 Mapping Fields \u00b6 Most times, the url you're getting headlines from follows a different schema than the one expected by Homer. For example, if you would like to show jokes from ChuckNorris.io, you'll find that the url https://api.chucknorris.io/jokes/random is giving you info like this: { \"categories\" : [], \"created_at\" : \"2020-01-05 13:42:22.089095\" , \"icon_url\" : \"https://assets.chucknorris.host/img/avatar/chuck-norris.png\" , \"id\" : \"MR2-BnMBR667xSpQBIleUg\" , \"updated_at\" : \"2020-01-05 13:42:22.089095\" , \"url\" : \"https://api.chucknorris.io/jokes/MR2-BnMBR667xSpQBIleUg\" , \"value\" : \"Chuck Norris can quitely sneak up on himself\" } but... you need that info to be transformed to something like this: { \"title\" : \"MR2-BnMBR667xSpQBIleUg\" , \"content\" : \"Chuck Norris can quitely sneak up on himself\" } Now, you can do that using the mapping field in your message configuration. This example would be something like this: message: url: https://api.chucknorris.io/jokes/random mapping: title: 'id' content: 'value' As you would see, using the ID as a title doesn't seem nice, that's why when a field is empty it would keep the default values, like this: message: url: https://api.chucknorris.io/jokes/random mapping: content: 'value' title: \"Chuck Norris Facts!\" and even an error message in case the url didn't respond or threw an error: message: url: https://api.chucknorris.io/jokes/random mapping: content: 'value' title: \"Chuck Norris Facts!\" content: \"Message could not be loaded\" by @JamiePhonic \u00b6 Homer allows you to set a \"message\" that will appear at the top of the page, however, you can also supply a url: . If the URL you specified returns a JSON object that defines a title and content item, homer will replace these values from your config.yml with the ones in the returned object. So, using Node-Red and a quick flow, you can process an RSS feed to replace the message with a news item! To get started, simply import this flow into your Node-Red instance and change the RSS feed in the \"Get News RSS Feed\" node to one of your choosing! So far, the flow has been tested with BBC News and Sky News, however it should be easy to modify the flow to work with other RSS feeds if they don't work out of the box!","title":"Tips & tricks"},{"location":"tips_and_tricks/#tips-tricks","text":"Here is a collection of neat tips and tricks that Homer users have come up with!","title":"Tips &amp; Tricks"},{"location":"tips_and_tricks/#use-homer-as-a-custom-new-tab-page","text":"","title":"Use Homer as a custom \"new tab\" page"},{"location":"tips_and_tricks/#by-vosdev","text":"These extensions for Firefox and Chrome & Friends allow you to have your homer dashboard in your new tab page, while leaving focus on the address bar meaning you can still type right away if you want to search or go to a page that is not on your homer dash. The Firefox extension loads Homer in an iframe on your new tab page, meaning you have to add target: '_top' to each of your items. - name : \"Reddit\" logo : \"assets/daily/reddit.png\" url : \"https://reddit.com\" target : '_top' - name : \"YouTube\" logo : \"assets/daily/youtube.png\" url : \"https://youtube.com\" target : '_top'","title":"by @vosdev"},{"location":"tips_and_tricks/#yaml-anchors","text":"","title":"YAML Anchors"},{"location":"tips_and_tricks/#by-jamiephonic","text":"Since Homer is configured using YAML, it supports all of YAML's helpful features, such as anchoring! For example, you can define tags and tag styles for each \"item\" in a service. Using Anchoring, you can define all your tags and their styles once like this: (for example) # Some pre-defined tag styles. reference these using <<: *{NAME} inside an item definition; For Example, <<: *Apps tags : Favourite : &Favourite - tag : \"Favourite\" tagstyle : \"is-medium is-primary\" CI : &CI - tag : \"CI\" tagstyle : \"is-medium is-success\" Apps : &Apps - tag : \"App\" tagstyle : \"is-medium is-info\" and then simply reference these pre-defined (anchored) tags in each item like so: - name : \"VS Code\" logo : \"/assets/vscode.png\" subtitle : \"Develop Code Anywhere, On Anything!\" << : *Apps # Reference to the predefined \"App\" Tag url : \"https://vscode.example.com/\" target : \"_blank\" # optional html tag target attribute ```` Then when Homer reads your config, it will substitute your anchors automatically, the above example is equal to : ``` yaml - name : \"VS Code\" logo : \"/assets/vscode.png\" subtitle : \"Develop Code Anywhere, On Anything!\" tag : \"App\" tagstyle : \"is-medium is-info\" url : \"https://vscode.example.com/\" target : \"_blank\" # optional html tag target attribute The end result is that if you want to update the name or style of any particular tag, just update it once, in the tags section! Great if you have a lot of services or a lot of tags!","title":"by @JamiePhonic"},{"location":"tips_and_tricks/#remotely-edit-your-config-with-code-server","text":"","title":"Remotely edit your config with Code Server"},{"location":"tips_and_tricks/#by-jamiephonic_1","text":"Homer doesn't yet provide a way to edit your configuration from inside Homer itself, but that doesn't mean it can't be done! You can setup and use Code-Server to edit your config.yml file from anywhere! If you're running Homer in docker, you can setup a Code-Server container and pass your homer config directory into it. Simply pass your homer config directory as an extra -v parameter to your code-server container: -v '/your/local/homer/config-dir/' : '/config/homer' : 'rw' This will map your homer config directory (For example, /docker/appdata/homer/) into code-server's /config/ directory, in a sub folder called homer As a bonus, Code-Server puts the \"current folder\" as a parameter in the URL bar, so you could add a links: entry in Homer that points to your code-server instance with the directory pre-filled for essentially 1 click editing! For example: links: - name: Edit config icon: fas fa-cog url: https://vscode.example.net/?folder=/config/homer target: \"_blank\" # optional html tag target attribute where the path after ?folder= is the path to the folder where you mounted your homer config INSIDE the Code-Server container.","title":"by @JamiePhonic"},{"location":"tips_and_tricks/#example-code-server-docker-create-command","text":"docker create \\ --name = code-server \\ -e PUID = 1000 \\ -e PGID = 1000 \\ -e TZ = Europe/London \\ -e PASSWORD ={ YOUR_PASSWORD } ` #optional` \\ -e SUDO_PASSWORD ={ YOUR SUDO_PASSWORD } ` #optional` \\ -p 8443 :8443 \\ -v /path/to/appdata/config:/config \\ -v /your/local/homer/config-dir/:/config/homer \\ --restart unless-stopped \\ linuxserver/code-server","title":"Example Code-Server docker create command"},{"location":"tips_and_tricks/#get-the-news-headlines-in-homer","text":"","title":"Get the news headlines in Homer"},{"location":"tips_and_tricks/#mapping-fields","text":"Most times, the url you're getting headlines from follows a different schema than the one expected by Homer. For example, if you would like to show jokes from ChuckNorris.io, you'll find that the url https://api.chucknorris.io/jokes/random is giving you info like this: { \"categories\" : [], \"created_at\" : \"2020-01-05 13:42:22.089095\" , \"icon_url\" : \"https://assets.chucknorris.host/img/avatar/chuck-norris.png\" , \"id\" : \"MR2-BnMBR667xSpQBIleUg\" , \"updated_at\" : \"2020-01-05 13:42:22.089095\" , \"url\" : \"https://api.chucknorris.io/jokes/MR2-BnMBR667xSpQBIleUg\" , \"value\" : \"Chuck Norris can quitely sneak up on himself\" } but... you need that info to be transformed to something like this: { \"title\" : \"MR2-BnMBR667xSpQBIleUg\" , \"content\" : \"Chuck Norris can quitely sneak up on himself\" } Now, you can do that using the mapping field in your message configuration. This example would be something like this: message: url: https://api.chucknorris.io/jokes/random mapping: title: 'id' content: 'value' As you would see, using the ID as a title doesn't seem nice, that's why when a field is empty it would keep the default values, like this: message: url: https://api.chucknorris.io/jokes/random mapping: content: 'value' title: \"Chuck Norris Facts!\" and even an error message in case the url didn't respond or threw an error: message: url: https://api.chucknorris.io/jokes/random mapping: content: 'value' title: \"Chuck Norris Facts!\" content: \"Message could not be loaded\"","title":"Mapping Fields"},{"location":"tips_and_tricks/#by-jamiephonic_2","text":"Homer allows you to set a \"message\" that will appear at the top of the page, however, you can also supply a url: . If the URL you specified returns a JSON object that defines a title and content item, homer will replace these values from your config.yml with the ones in the returned object. So, using Node-Red and a quick flow, you can process an RSS feed to replace the message with a news item! To get started, simply import this flow into your Node-Red instance and change the RSS feed in the \"Get News RSS Feed\" node to one of your choosing! So far, the flow has been tested with BBC News and Sky News, however it should be easy to modify the flow to work with other RSS feeds if they don't work out of the box!","title":"by @JamiePhonic"},{"location":"troubleshooting/","text":"Troubleshooting \u00b6 My custom service card doesn't work, nothing appears or offline status is displayed (pi-hole, sonarr, ping, ...) \u00b6 You might by facing a CORS (Cross Origin Request Sharing) issue. It happens when the targeted service is hosted on a different domain or port. Web browsers will not allow to fetch information from a different site without explicit permissions (the targeted service must include a special Access-Control-Allow-Origin: * HTTP headers). If this happens your web console ( ctrl+shift+i or F12 ) will be filled with this kind of errors: Access to fetch at 'https://<target-service>' from origin 'https://<homer>' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled. To resolve this, you can either: Host all your target service under the same domain & port. Modify the target server configuration so that the response of the server included following header- Access-Control-Allow-Origin: * ( https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests ). It might be an option in the targeted service, otherwise depending on how the service is hosted, the proxy or web server can seamlessly add it. Use a cors proxy server like cors-container , cors-anywhere or many others.","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"troubleshooting/#my-custom-service-card-doesnt-work-nothing-appears-or-offline-status-is-displayed-pi-hole-sonarr-ping","text":"You might by facing a CORS (Cross Origin Request Sharing) issue. It happens when the targeted service is hosted on a different domain or port. Web browsers will not allow to fetch information from a different site without explicit permissions (the targeted service must include a special Access-Control-Allow-Origin: * HTTP headers). If this happens your web console ( ctrl+shift+i or F12 ) will be filled with this kind of errors: Access to fetch at 'https://<target-service>' from origin 'https://<homer>' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled. To resolve this, you can either: Host all your target service under the same domain & port. Modify the target server configuration so that the response of the server included following header- Access-Control-Allow-Origin: * ( https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests ). It might be an option in the targeted service, otherwise depending on how the service is hosted, the proxy or web server can seamlessly add it. Use a cors proxy server like cors-container , cors-anywhere or many others.","title":"My custom service card doesn't work, nothing appears or offline status is displayed (pi-hole, sonarr, ping, ...)"}]}